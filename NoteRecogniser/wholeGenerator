from PIL import Image, ImageDraw
import os
import random

from matplotlib import pyplot as plt

# 📁 Folder docelowy
base_dir = "data_notes_aligned"
os.makedirs(base_dir, exist_ok=True)

# 🎼 Ustawienia pięciolinii
# Linie od góry: y = [20, 25, 30, 35, 40]
# Odległość między liniami = 5 px
# Nuty co pół linii (2.5 px)
# C4 ma linie pomocnicze poniżej, A5 powyżej
def get_note_y(note_name):
    positions = {
        "C4": 45,   # dwie linie pomocnicze poniżej
        "D4": 42.5,
        "E4": 40,   # pierwsza linia pomocnicza
        "F4": 37.5,
        "G4": 35,   # 5. linia
        "A4": 32.5,
        "H4": 30,   # 4. linia
        "C5": 27.5,
        "D5": 25,   # 3. linia
        "E5": 22.5,
        "F5": 20,   # 2. linia
        "G5": 17.5,
        "A5": 15,   # 1. linia pomocnicza powyżej
    }
    return positions[note_name]

# 🎨 Rysowanie nuty
def draw_note(note_name, save_path):
    img = Image.new('L', (120, 70), color=255)
    draw = ImageDraw.Draw(img)

    # pięciolinia
    for i in range(5):
        y = 20 + i * 5
        draw.line((10, y, 110, y), fill=0, width=1)

    y_note = get_note_y(note_name)
    x_shift = random.randint(-2, 2)
    y_shift = random.uniform(-0.5, 0.5)

    # rysujemy nutę (mała elipsa)
    draw.ellipse(
        (55 + x_shift, y_note - 3 + y_shift, 65 + x_shift, y_note + 3 + y_shift),
        fill=0
    )

    # linie pomocnicze jeśli poza pięciolinią
    if note_name in ["C4"]:
        draw.line((50, 45, 70, 45), fill=0, width=1)
    elif note_name == "A5":
        draw.line((50, 15, 70, 15), fill=0, width=1)

    # delikatny "szum"
    for _ in range(random.randint(3, 8)):
        x = random.randint(0, 119)
        y = random.randint(0, 69)
        img.putpixel((x, y), random.choice([255, 0]))

    img.save(save_path)

# 🎵 Lista nut od C4 do A5
notes = ["C4", "D4", "E4", "F4", "G4", "A4", "H4", "C5", "D5", "E5", "F5", "G5", "A5"]

# 🧩 Generowanie danych
for note in notes:
    note_dir = os.path.join(base_dir, note)
    os.makedirs(note_dir, exist_ok=True)

    for i in range(100):
        filename = f"{i}.png"
        path = os.path.join(note_dir, filename)
        draw_note(note, path)

print("✅ Wygenerowano nuty w folderze:", base_dir)

# ---- funkcja podglądu - wyświetli po 2 przykłady z każdej klasy ----
def preview_samples(base_folder, classes, per_class=2, cols=6):
    imgs = []
    labels = []
    for cls in classes:
        folder = os.path.join(base_folder, cls)
        files = sorted(os.listdir(folder))[:per_class]
        for f in files:
            imgs.append(Image.open(os.path.join(folder, f)).convert('L'))
            labels.append(cls)
    # rysujemy siatkę
    rows = (len(imgs) + cols - 1) // cols
    plt.figure(figsize=(cols*1.6, rows*1.6))
    for i, (im, lbl) in enumerate(zip(imgs, labels)):
        plt.subplot(rows, cols, i+1)
        plt.imshow(im, cmap='gray', vmin=0, vmax=255)
        plt.title(lbl)
        plt.axis('off')
    plt.tight_layout()
    plt.show()

# preview (uruchom jeśli chcesz od razu zobaczyć)
# preview_samples(base_dir, notes, per_class=2)
preview_samples(base_dir, notes, per_class=2)
